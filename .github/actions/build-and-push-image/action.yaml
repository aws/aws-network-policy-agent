name: Build Image and Push
description: 'Builds Multi-arch Network Policy Agent image and pushes to ECR'
inputs:
  aws-region:
    description: AWS region
    required: true
outputs:
  image_uri:
    description: "Network Policy Agent Image"
    value: ${{ steps.build.outputs.image_uri }}
runs:
  using: "composite"
  steps:
    - name: Set up Docker QEMU
      uses: docker/setup-qemu-action@v2
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Build and Push Image
      id: build
      shell: bash
      env:
        REGION: ${{ inputs.aws-region }}
        AWS_ECR_REPO_NAME: amazon/aws-network-policy-agent
      run: |
          IMAGE_VERSION=$(git rev-parse HEAD)
          AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          AWS_ECR_REGISTRY="$AWS_ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com"

          aws ecr get-login-password --region $REGION | docker login --username AWS --password-stdin ${AWS_ECR_REGISTRY}
          if ! `aws ecr describe-repositories --registry-id $AWS_ACCOUNT_ID --repository-names $AWS_ECR_REPO_NAME >/dev/null 2>&1`; then
              echo "creating ECR repo with name $AWS_ECR_REPO_NAME"
              aws ecr create-repository --repository-name $AWS_ECR_REPO_NAME
          fi

          if [[ $(aws ecr batch-get-image --repository-name=$AWS_ECR_REPO_NAME --image-ids imageTag=$IMAGE_VERSION \
              --query 'images[].imageId.imageTag' --region $REGION) != "[]" ]]; then
            echo "Image $AWS_ECR_REPO_NAME:$IMAGE_VERSION already exists. Skipping image build."
          else
            echo "Building AWS Network Policy Agent latest image"

            docker buildx create --name="network-policy-agent-builder" --buildkitd-flags '--allow-insecure-entitlement network.host' --use >/dev/null
            make multi-arch-build-and-push VERSION=$IMAGE_VERSION IMAGE=$AWS_ECR_REGISTRY/$AWS_ECR_REPO_NAME

            docker buildx rm network-policy-agent-builder
          fi
          image_uri=$AWS_ECR_REGISTRY/$AWS_ECR_REPO_NAME:$IMAGE_VERSION
          echo "image_uri=$(echo $image_uri)" >> $GITHUB_OUTPUT
